{"version":3,"sources":["hooks/useAppReducer.js","utils/combineReducers.js","utils/thunk.js","constants/actions.js","store/reducers/contacts.js","store/reducers/root.js","store/context/Provider.js","hooks/useAppDispatch.js","hooks/useAppStore.js","config/config.js","services/networkService.js","api/contactsApi.js","utils/sortAlphabetical.js","store/actions/contacts.js","components/ContactList/ContactDetail/ContactDetail.js","hooks/useOutsideClick.js","components/ContactList/ContactListHeader.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js"],"names":["slices","useAppReducer","rootReducer","useState","isInitialized","setIsInitialized","useReducer","state","normalDispatch","stateGetter","useCallback","JSON","parse","stringify","dispatch","useMemo","getState","action","Function","wrapAsync","type","ACTIONS","CONTACTS","SET_CONTACTS","contactInitialState","contacts","pending","payload","SET_SELECTED_TAB","selectedTab","Object","keys","reduce","acc","prop","AppContext","React","createContext","AppContextUpdate","Provider","children","value","useAppDispatch","useContext","useAppStore","selector","stateSelector","common","culture","nat","alphabet","process","split","contactCount","config","api","axios","create","baseURL","getContactsApi","a","get","params","results","result","sortAlphabetical","array","forEach","item","letter","name","last","toLocaleLowerCase","push","index","sort","b","setSelectedTab","setContacts","ContactDetail","ref","callback","setOpen","contact","modalStyle","contactDetail","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","className","style","onClick","src","picture","medium","alt","first","login","username","email","phone","location","street","city","postcode","ContactListHeader","selectTab","map","tab","availableContacts","length","ContactListItem","ContactList","open","selectedContact","setSelectedContact","setModalStyle","contactsResult","data","Array","fill","top","offsetTop","offsetHeight","left","offsetLeft","width","offsetWidth","selectContact","id","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.96071842.chunk.js","sourcesContent":["import { useState, useMemo, useReducer,useCallback } from 'react';\nimport { wrapAsync } from 'utils/thunk';\n\nexport const useAppReducer = (rootReducer) => {\n    const [isInitialized, setIsInitialized] = useState(false);\n    //Creating a global State for app\n    const [state, normalDispatch] = useReducer(rootReducer, {});\n\n    const stateGetter = useCallback(() => {\n        //Deep cloning the state in order to prevent\n        // passing it by reference and having a read only value\n        return JSON.parse(JSON.stringify(state));\n    }, [state]);\n    //creating an async dispatch\n    const dispatch = useMemo(() => wrapAsync(normalDispatch, stateGetter), [normalDispatch, stateGetter]);\n    ///TODO: improve the functionality\n    if (!isInitialized) {\n        normalDispatch({ type: '@INIT' });\n        setIsInitialized(true);\n    }\n\n    return [state, dispatch];\n};\n","export const combineReducers = (slices) => (state, action) =>\n  Object.keys(slices).reduce(\n    // use for..in loop, if you prefer it\n    (acc, prop) => ({\n      ...acc,\n      [prop]: slices[prop](acc[prop], action),\n    }),\n    state\n  );\n","//Using thunk pattern in order to have async actions\nexport function wrapAsync(dispatch,getState) {\n  return function(action) {\n    if (action instanceof Function) {\n      return action(dispatch,getState)\n    }\n    return dispatch(action)\n  }\n}","export const ACTIONS = {\n    CONTACTS: {\n        SET_CONTACTS: 'SET_CONTACTS',\n    },\n};\n","import { ACTIONS } from 'constants/actions';\n\nconst contactInitialState = {\n    contacts: [],\n    pending:true\n};\nconst contacts = (state = contactInitialState, action) => {\n    switch (action.type) {\n        case ACTIONS.CONTACTS.SET_CONTACTS:\n            return {\n                ...state,\n                contacts: action.payload,\n                pending:false\n            };\n        case ACTIONS.CONTACTS.SET_SELECTED_TAB:\n            return{\n                ...state,\n                selectedTab:action.payload\n            }\n        default:\n            return state;\n    }\n};\n\nexport default contacts;\n","import { combineReducers } from 'utils/combineReducers';\nimport contacts from './contacts';\n\nconst reducers = {\n    contacts,\n};\n\nexport const rootReducer = combineReducers(reducers);\n","import { useAppReducer } from 'hooks/useAppReducer';\nimport { rootReducer } from 'store/reducers/root';\nimport React, { useContext } from 'react';\n\nconst AppContext = React.createContext();\nconst AppContextUpdate = React.createContext();\n\nexport const useAppState = () => {\n    return useContext(AppContext);\n};\n\nexport const useDispatch = () => {\n    return useContext(AppContextUpdate);\n};\n\nexport const Provider = ({ children }) => {\n    const [state, dispatch] = useAppReducer(rootReducer);\n    return (\n        <AppContext.Provider value={state}>\n            <AppContextUpdate.Provider value={dispatch}>{children}</AppContextUpdate.Provider>\n        </AppContext.Provider>\n    );\n};\n","import { useDispatch } from 'store/context/Provider';\n\n//Must be used inside of the <Provider />\n//if you want to change the app state management modify this hook\n\nexport const useAppDispatch = () => {\n    const dispatch = useDispatch();\n    const setAppState = (action) => {\n        return dispatch(action);\n    };\n    return setAppState;\n};\n","import { useCallback } from 'react';\nimport { useAppState } from 'store/context/Provider';\n\n//Must be used inside of the <Provider />\n//if you want to change the app state management modify this hook\n\nexport const useAppStore = (selector) => {\n    const state = useAppState();\n    const stateSelector = useCallback(\n        (selector) => {\n            return selector(state);\n        },\n        [state],\n    );\n\n    return stateSelector(selector);\n};\n","const common = {\n    culture: {\n        nat: 'US',\n        alphabet: process.env.REACT_APP_TABS.split(''),\n    },\n    contactCount: process.env.REACT_APP_NUMBER_CARDS,\n};\nconst dev = {\n    //Add dev specific config here\n};\nconst prod = {\n    //Add prod specific config here\n};\nexport const config = process.env.NODE_ENV === 'production' ? { ...common, ...prod } : { ...common, ...dev };\n","import axios from 'axios';\n\nconst api = axios.create({\n\t\n\tbaseURL: process.env.REACT_APP_API_URL ,\n});\n\nexport default api;","import { config } from 'config/config';\nimport api from 'services/networkService';\nexport const getContactsApi = async () => {\n    try{\n        const result = await api.get('', { params: { results: config.contactCount, nat: config.culture.nat } });\n        return result;\n    }catch(error){\n        throw error;\n    }\n    \n};\n","export const sortAlphabetical = (array) => {\n    ///TODO: replace with insertion sort\n    const result = {};\n    if (array == null) return result;\n    array.forEach((item) => {\n        const letter = item.name.last[0].toLocaleLowerCase();\n        if (!result[letter]) {\n            result[[letter]] = [];\n        }\n        result[letter].push(item);\n    });\n    Object.keys(result).forEach((index) => {\n        result[index].sort((a, b) => (a.name.last > b.name.last ? 1 : -1));\n    });\n    return result;\n};\n","import { getContactsApi } from 'api/contactsApi';\nimport { ACTIONS } from 'constants/actions';\nimport { sortAlphabetical } from 'utils/sortAlphabetical';\n\nexport const getContacts = () => {\n    return async (dispatch) => {\n        try {\n            const contactsResult = await getContactsApi();\n            const contacts = sortAlphabetical(contactsResult.data.results);\n            const selectedTab = Object.keys(contacts).sort()[0];\n            dispatch(setSelectedTab(selectedTab));\n            dispatch(setContacts(contacts));\n        } catch (error) {\n            ///TODO: add toast later\n            throw error;\n        }\n    };\n};\nexport const setSelectedTab = (selectedTab) => {\n    return {\n        type: ACTIONS.CONTACTS.SET_SELECTED_TAB,\n        payload: selectedTab,\n    };\n};\nconst setContacts = (contacts) => {\n    return {\n        type: ACTIONS.CONTACTS.SET_CONTACTS,\n        payload: contacts,\n    };\n};\n","import { useRef } from 'react';\nimport { useOutsideClick } from 'hooks/useOutsideClick';\n\nconst ContactDetail = ({ setOpen, contact, modalStyle }) => {\n    const contactDetail = useRef(null);\n    useOutsideClick(contactDetail, () => {\n        setOpen(false);\n    });\n    return (\n        <div className=\"contact-detail\" ref={contactDetail} style={modalStyle} data-testid=\"contact-detail\">\n            <span\n                className=\"contact-detail__close-button\"\n                onClick={() => {\n                    setOpen(false);\n                }}\n            >\n                &#10006;\n            </span>\n            \n            <div className=\"contact-detail__image-container\">\n                <img className=\"contact-detail__image \" src={contact.picture.medium} alt=\"contact\" data-testid=\"user-image\"/>\n            </div>\n            <div>\n                <span className=\"contact-detail__full-name\">{`${contact.name.last}, ${contact.name.first}`}</span>\n                <div className=\"contact-detail__username-badge\">username {contact.login.username}</div>\n                <table className=\"contact-detail__info-table\">\n                    <tbody>\n                        <tr>\n                            <td>\n                                <strong>email</strong>\n                            </td>\n                            <td>{contact.email}</td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <strong>phone</strong>\n                            </td>\n                            <td>{contact.phone}</td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <strong>street</strong>\n                            </td>\n                            <td>{contact.location.street.name}</td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <strong>city</strong>\n                            </td>\n                            <td>{contact.location.city}</td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <strong>state</strong>\n                            </td>\n                            <td>{contact.location.state}</td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <strong>postcode</strong>\n                            </td>\n                            <td>{contact.location.postcode}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\nexport default ContactDetail;\n","import { useEffect } from \"react\";\n\nexport const useOutsideClick = (ref, callback) => {\n  useEffect(() => {\n    // if outside of the element is clicked this function gets called\n    function handleClickOutside(event) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        callback();\n      }\n    }\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref]);\n};\n","import { config } from 'config/config';\n\nconst ContactListHeader = ({ contacts, selectTab, selectedTab }) => {\n    return (\n        <ul className=\"contact-list-header\">\n            {config.culture.alphabet.map((tab) => {\n                tab = tab.toLocaleLowerCase();\n                const availableContacts = contacts[tab] ? contacts[tab].length : 0;\n                return (\n                    <li\n                        data-testid=\"contact-list-header-item\"\n                        key={tab}\n                        className={`contact-list-header__item px-2 py-2 ${availableContacts < 1 ? 'contact-list-header__item--disabled' : ''} ${\n                            selectedTab === tab ? 'contact-list-header__item--active' : ''\n                        }`}\n                        onClick={() => {\n                            if (availableContacts > 0) {\n                                selectTab(tab);\n                            }\n                        }}\n                    >\n                        <span>\n                            {tab}\n                            <sub className=\"ml-2\">{availableContacts}</sub>\n                        </span>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default ContactListHeader;\n","const ContactListItem = ({ contact, onClick }) => {\n    return (\n        <li className=\"contact-list__item contact-list__item--hover \" onClick={onClick} data-testid=\"contact-list-item\">\n            {`${contact.name.last}, ${contact.name.first}`}\n        </li>\n    );\n};\nexport default ContactListItem;\n","import { useAppDispatch } from 'hooks/useAppDispatch';\nimport { useAppStore } from 'hooks/useAppStore';\nimport { useEffect, useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport { getContacts, setSelectedTab } from 'store/actions/contacts';\n// import {  useDispatch } from 'store/context/context';\nimport ContactDetail from './ContactDetail/ContactDetail';\nimport ContactListHeader from './ContactListHeader';\nimport ContactListItem from './ContactListItem';\n\n\nconst ContactList = () => {\n    const { contacts, pending, selectedTab } = useAppStore((state) => state.contacts);\n    const [open, setOpen] = useState(false);\n    const [selectedContact, setSelectedContact] = useState(false);\n    const [modalStyle, setModalStyle] = useState({});\n\n    const dispatch = useAppDispatch();\n    useEffect(() => {\n        dispatch(getContacts());\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const selectTab = (tab) => {\n        dispatch(setSelectedTab(tab));\n    };\n    const selectContact = (event, contact) => {\n        setOpen(true);\n        setModalStyle({ top: event.target.offsetTop + event.target.offsetHeight, left: event.target.offsetLeft, width: `${event.target.offsetWidth}px` });\n        setSelectedContact(contact);\n    };\n\n    return (\n        <div className=\"d-flex\">\n            <div className=\"contact-list-container\">\n                <ContactListHeader contacts={contacts} selectTab={selectTab} selectedTab={selectedTab} />\n                <ul className=\"contact-list\">\n                    {pending\n                        ? new Array(10).fill(\"loading...\").map((value,index) => {\n                              return (\n                                  <li className=\"contact-list__item\" data-testid=\"loading-contacts\" key={index}>\n                                      <Skeleton />\n                                  </li>\n                              );\n                          })\n                        : contacts[selectedTab].map((contact) => {\n                              return (\n                                  <ContactListItem\n                                      contact={contact}\n                                      key={contact.id.value}\n                                      onClick={(event) => {\n                                          selectContact(event, contact);\n                                      }}\n                                  />\n                              );\n                          })}\n                </ul>\n\n                {/* <div className=\"contact-list-body\">\n                   \n                </div> */}\n                {open && <ContactDetail setOpen={setOpen} contact={selectedContact} modalStyle={modalStyle} />}\n            </div>\n        </div>\n    );\n};\nexport default ContactList;\n","import ContactList from \"components/ContactList/ContactList\";\nimport { Provider } from \"store/context/Provider\";\n\nfunction App() {\n  return (\n    <Provider>\n      <ContactList />\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/style.scss';\nimport 'react-loading-skeleton/dist/skeleton.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}